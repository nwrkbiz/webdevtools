// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "ViewFluid.h"
#include <FL/fl_draw.H>
#include <FL/Fl_Table_Row.H>
#include <string>
#include <vector>

void SimpleTable::draw_cell(TableContext context, int R, int C, int X, int Y, int W, int H) {
  static char s[40];
      switch ( context ) {
        case CONTEXT_STARTPAGE:                   // before page is drawn..
          fl_font(FL_HELVETICA, 16);              // set the font for our drawing operations
          return; 
        case CONTEXT_COL_HEADER:                  // Draw column headers
          sprintf(s,"%c",'A'+C);                // "A", "B", "C", etc.
          DrawHeader(s,X,Y,W,H);
          return; 
        case CONTEXT_ROW_HEADER:                  // Draw row headers
          sprintf(s,"%02d:",R);                 // "001:", "002:", etc
          DrawHeader(s,X,Y,W,H);
          return; 
        case CONTEXT_CELL:                        // Draw data in cells
        	if((int)m_TableData.size()-1 < R)
        		SetTableData("", 0, R);
        	
        	if((int)m_TableData.at(R).size()-1 < C)
        		SetTableData("", C, 0);
        				
          DrawData(m_TableData.at(R).at(C).c_str(),
                   m_CellColors.at(R).at(C),X,Y,W,H);
          return;
        default:
          return;
   }
}

SimpleTable::SimpleTable(int x, int y, int w, int h, const char *l ) : Fl_Table_Row(x,y,w,h,l) {
}

void SimpleTable::SetTableData(std::string data, unsigned int x , unsigned int y , Fl_Color color ) {
  if(m_TableData.empty() || (m_TableData.size() < y+1))
  {
      m_TableData.resize(y+1);
      rows(y+1);
  }
  
  for (unsigned int i = 0; i < m_TableData.size(); ++i)
      if(m_TableData.at(i).empty() || 
        (m_TableData.at(i).size() < x+1))
      {
          m_TableData.at(i).resize(x+1, "");   
          cols(x+1);
      }   
  
  m_TableData.at(y).at(x) = data;
  SetCellColor(color,x,y);
}

void SimpleTable::SetCellColor(Fl_Color color, unsigned int x , unsigned int y ) {
  if(m_CellColors.empty() || (m_CellColors.size() < y+1))
  {
      m_CellColors.resize(y+1);
      rows(y+1);
  }
  
  for (unsigned int i = 0; i < m_CellColors.size(); ++i)
      if(m_CellColors.at(i).empty() || 
        (m_CellColors.at(i).size() < x+1))
      {
          m_CellColors.at(i).resize(x+1, FL_WHITE);   
          cols(x+1);
      }   
  
  m_CellColors.at(y).at(x) = color;
}

std::vector<std::vector<std::string>> SimpleTable::GetTableData() {
  return m_TableData;
}

void SimpleTable::Resize(unsigned int x , unsigned int y ) {
  m_TableData.resize(y+1);
  m_CellColors.resize(y+1);
  rows(y+1);
  for (unsigned int i = 0; i < m_TableData.size(); ++i)
  {
      m_CellColors.at(i).resize(x+1, FL_WHITE);
      m_TableData.at(i).resize(x+1, "");   
  }       
  cols(x+1);
}

void SimpleTable::DrawData(const char *s, Fl_Color cell_color, int X, int Y, int W, int H) {
  fl_push_clip(X,Y,W,H);
        // Draw cell bg
        fl_color(cell_color); fl_rectf(X,Y,W,H);
        // Draw cell data
        fl_color(FL_GRAY0); fl_draw(s, X,Y,W,H, FL_ALIGN_CENTER);
        // Draw box border
        fl_color(color()); fl_rect(X,Y,W,H);
  fl_pop_clip();
}

void SimpleTable::DrawHeader(const char *s, int X, int Y, int W, int H) {
  fl_push_clip(X,Y,W,H);
        fl_draw_box(FL_THIN_UP_BOX, X,Y,W,H, row_header_color());
        fl_color(FL_BLACK);
        fl_draw(s, X,Y,W,H, FL_ALIGN_CENTER);
  fl_pop_clip();
}

ViewFluid::ViewFluid() {
  { win_main = new Fl_Double_Window(490, 520, "Web Tools");
    win_main->box(FL_GTK_DOWN_BOX);
    win_main->user_data((void*)(this));
    win_main->hotspot(win_main);
    { Fl_Tabs* o = new Fl_Tabs(0, 0, 490, 520);
      { Fl_Group* o = new Fl_Group(0, 25, 490, 495, "HTTPServer");
        { ti_http_addr = new Fl_Input(135, 95, 165, 30, "Bind Address:");
        } // Fl_Input* ti_http_addr
        { vi_http_port = new Fl_Value_Input(345, 95, 90, 30, "Port:");
        } // Fl_Value_Input* vi_http_port
        { ti_http_folder = new Fl_File_Input(135, 135, 240, 35, "Root directory:");
        } // Fl_File_Input* ti_http_folder
        { btn_http_folder = new Fl_Button(375, 135, 60, 35, "Select");
        } // Fl_Button* btn_http_folder
        { vi_http_threads = new Fl_Value_Input(135, 220, 90, 30, "Threads:");
        } // Fl_Value_Input* vi_http_threads
        { chb_http_ssl = new Fl_Check_Button(360, 220, 25, 25, "Use SSL");
          chb_http_ssl->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* chb_http_ssl
        { ti_http_certificate = new Fl_File_Input(135, 260, 240, 35, "Certificate:");
          ti_http_certificate->deactivate();
        } // Fl_File_Input* ti_http_certificate
        { btn_http_certificate = new Fl_Button(375, 260, 60, 35, "Select");
          btn_http_certificate->deactivate();
        } // Fl_Button* btn_http_certificate
        { ti_http_certkey = new Fl_File_Input(135, 310, 240, 35, "Key:");
          ti_http_certkey->deactivate();
          Fl_Group::current()->resizable(ti_http_certkey);
        } // Fl_File_Input* ti_http_certkey
        { btn_http_certkey = new Fl_Button(375, 310, 60, 35, "Select");
          btn_http_certkey->deactivate();
        } // Fl_Button* btn_http_certkey
        { btn_http_start = new Fl_Return_Button(155, 380, 180, 30, "Start");
        } // Fl_Return_Button* btn_http_start
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 25, 490, 495, "Websocket Server");
        o->hide();
        { ti_wss_addr = new Fl_Input(135, 40, 165, 30, "Bind Address:");
        } // Fl_Input* ti_wss_addr
        { vi_wss_port = new Fl_Value_Input(345, 40, 90, 30, "Port:");
        } // Fl_Value_Input* vi_wss_port
        { vi_wss_threads = new Fl_Value_Input(135, 75, 90, 30, "Threads:");
        } // Fl_Value_Input* vi_wss_threads
        { chb_wss_ssl = new Fl_Check_Button(345, 75, 25, 25, "Use SSL");
          chb_wss_ssl->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* chb_wss_ssl
        { ti_wss_certificate = new Fl_File_Input(135, 115, 240, 35, "Certificate:");
          ti_wss_certificate->deactivate();
        } // Fl_File_Input* ti_wss_certificate
        { btn_wss_certificate = new Fl_Button(375, 115, 60, 35, "Select");
          btn_wss_certificate->deactivate();
        } // Fl_Button* btn_wss_certificate
        { ti_wss_certkey = new Fl_File_Input(135, 165, 240, 35, "Key:");
          ti_wss_certkey->deactivate();
          Fl_Group::current()->resizable(ti_wss_certkey);
        } // Fl_File_Input* ti_wss_certkey
        { btn_wss_certkey = new Fl_Button(375, 165, 60, 35, "Select");
          btn_wss_certkey->deactivate();
        } // Fl_Button* btn_wss_certkey
        { btn_wss_start = new Fl_Button(160, 210, 180, 30, "Start");
        } // Fl_Button* btn_wss_start
        { te_wss_rcv = new Fl_Text_Editor(10, 270, 230, 190, "Received:");
          te_wss_rcv->deactivate();
        } // Fl_Text_Editor* te_wss_rcv
        { te_wss_snd = new Fl_Text_Editor(250, 270, 230, 190, "Answer:");
          te_wss_snd->deactivate();
        } // Fl_Text_Editor* te_wss_snd
        { btn_wss_send = new Fl_Return_Button(155, 480, 180, 30, "Send");
          btn_wss_send->deactivate();
        } // Fl_Return_Button* btn_wss_send
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 25, 490, 495, "Websocket Client");
        o->hide();
        { ti_wsc_addr = new Fl_Input(145, 50, 165, 30, "Bind Address:");
        } // Fl_Input* ti_wsc_addr
        { vi_wsc_port = new Fl_Value_Input(355, 50, 90, 30, "Port:");
        } // Fl_Value_Input* vi_wsc_port
        { vi_wsc_threads = new Fl_Value_Input(145, 85, 90, 30, "Threads:");
        } // Fl_Value_Input* vi_wsc_threads
        { chb_wsc_ssl = new Fl_Check_Button(355, 85, 25, 25, "Use SSL");
          chb_wsc_ssl->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* chb_wsc_ssl
        { btn_wsc_start = new Fl_Button(165, 130, 180, 30, "Start");
        } // Fl_Button* btn_wsc_start
        { te_wsc_snd = new Fl_Text_Editor(5, 190, 240, 245, "Send:");
          te_wsc_snd->deactivate();
        } // Fl_Text_Editor* te_wsc_snd
        { te_wsc_rcv = new Fl_Text_Editor(250, 190, 230, 245, "Received:");
          te_wsc_rcv->deactivate();
        } // Fl_Text_Editor* te_wsc_rcv
        { btn_wsc_send = new Fl_Return_Button(165, 455, 180, 30, "Send");
          btn_wsc_send->deactivate();
        } // Fl_Return_Button* btn_wsc_send
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 25, 490, 495, "About");
        o->hide();
        { box_about = new Fl_Box(5, 25, 480, 495, "Daniel Giritzer");
        } // Fl_Box* box_about
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    win_main->size_range(585, 555);
    win_main->end();
  } // Fl_Double_Window* win_main
}
